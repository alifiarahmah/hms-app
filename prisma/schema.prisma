generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}

model Post {
  id        String      @id @default(cuid())
  title     String
  content   String
  tags      Tag[]
  images    ImagePost[]
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
}

model Tag {
  name  String @id
  posts Post[]
}

model ImagePost {
  postId  String
  imageId String
  post    Post   @relation(fields: [postId], references: [id])
  image   Image  @relation(fields: [imageId], references: [id])

  @@id([postId, imageId])
}

model Image {
  id        String      @id
  title     String
  content   String
  ImagePost ImagePost[]
  createdAt DateTime    @default(now())
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model User {
  id            String             @id @default(cuid())
  nim           String             @unique
  name          String
  email         String             @unique
  password      String
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  subscriptions UserSubscription[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model CalendarEvent {
  uid         String   @id
  start       DateTime
  end         DateTime
  title       String
  description String?
  rrule       String? // Stringified RRULE
  meetingLink String?
}

model UserSubscription {
  id        String   @id @default(cuid())
  userId    String
  endpoint  String   @db.Text
  p256dh    String   @db.Text
  auth      String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, auth])
}
